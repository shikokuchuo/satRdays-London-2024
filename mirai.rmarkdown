---
title: mirai - for Shiny and Plumber Applications
subtitle: SatRdays London 2024
author: Charlie Gao
date: April 27, 2024
format:
    revealjs:
        theme:
            - moon
            - custom.scss
        incremental: true
        footer: "mirai package repository at https://github.com/shikokuchuo/mirai"
        embed-resources: true
        slide-number: true
editor:
    render-on-save: true
---


<style>
h1 {
  font-size: 1.6em !important;
}
h2 {
  font-size: 1.4em !important;
}
</style>


# mirai

## 未来

. . .

みらい &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; / mI ˈ ra ˈ i: /

. . .

n. future

. . .

![](images/miraicran.png)

##

```{.r code-line-numbers="|3|5-6|8-9|11|13-14"}
library(mirai)

m <- mirai(a + b, a = 1, b = 2)

m
#> < mirai | $data >

m$data
#> 'unresolved' logi NA

call_mirai(m)

m$data
#> 3
```

## {.center}

But what's so special about this? ...

1. Highly performant
2. Simple and correct
3. Designed for production

# 1: Highly Performant

* Uses `nanonext`

::: {.fragment}
```{.r}
nanonext::send
#> function(con, data, mode = c("serial", "raw", "next"), block = NULL)
#>  .Call(rnng_send, con, data, mode, block)
```
:::
::: {.fragment}
![](images/rnngsend.png)
:::

## Built on NNG

Nanomsg Next Generation

* State-of-the-art messaging and concurrency
* C library (re-imagination of ZeroMQ)
* Massively scalable
* High throughput

::: {.fragment}
![](images/nng.png)
:::

## Completely event-driven

Implementation completely devoid of polling loops:

::: {.fragment}
```{.r}
while (unresolved(mirai)) {
  Sys.sleep(0.1)
}
```
:::

* Even for promises[^1] (a world first - as a result of collaboration with Joe Cheng, creator of the Shiny framework and CTO of Posit)

* Instead uses:

  + Asynchronous callbacks from NNG
  + Synchronisation primitives allowing R to wait

[^1]: For mirai >= 0.13.2.9008 and upcoming mirai 1.0

# 2: Simple and robust

## Code simplicity

* ~500 lines of code (in total)

* Minimal interface (good defaults)

* No thousands of (hidden) options

* Easy to pick up

## Code Correctness

* Explicit design:

  + variables must be passed explicitly to the mirai

. . .

```{.r}
a <- 10
b <- 100
c <- 10000

m <- mirai(
  {
    y <- rnorm(a) * b + c
    rev(y)
  },
  a = a, b = b, c = c
)
```

  + no 'automagical' inferral (error-prone and makes code difficult to debug)
  
## Code Correctness

* Convenience feature:

  + allows passing an environment e.g. `environment()` (the calling environment)

. . .

```{.r}
a <- 10
b <- 100
c <- 1000

m <- mirai(
  {
    y <- rnorm(a) * b + c
    rev(y)
  },
  environment()
)
```

# 3: Designed for Production

## Used by Crew and Targets

Collaboration with Will Landau (creator of the `targets` reproducible pipeline ecosystem)

* `crew` extends `mirai` to High-Performance Computing environments such as traditional clusters or the cloud
* The default HPC backend for `targets`
* Used on daily basis in the life sciences industry powering e.g. Bayesian simulations for clinical trials parallelised on thousands of compute nodes

## Integrated with Base R

As a result of R Project Sprint 2023 & collaboration with Luke Tierney (R Core)

* Added 'mirai' as the first alternative communications backend for the base `parallel` package.[^2]

. . .

```{.r}
library(parallel)
mirai::register_cluster()

cl <- makeCluster(2)
cl
#> < miraiCluster | ID: `0` nodes: 2 active: TRUE >
```

[^2]: registration function works only on R4.4 or later

# How did we get here?

## ExtendedTask vs. Shiny Async

. . .

In 2017-2018, async programming introduced to R, and then Shiny, through the `later` and `promises` packages by Joe Cheng

* Shiny Async "was never a truly satisfying solution"
* _Incredibly_ steep learning curve
* Async operations "infect" everything downstream
* Did not solve intra-session concurrency
* UNTIL NOW with ExtendedTask (elegant solution to free up the reactive cycle)

## Sample Application

```{.r code-line-numbers="8,13-17"}
library(shiny)
library(bslib)
library(mirai)

ui <- page_fluid(
  numericInput("n", "Sample size (n)", 100),
  numericInput("delay", "Seconds to take for plot", 5),
  input_task_button("btn", "Plot uniform distribution"),
  plotOutput("plot")
)

server <- function(input, output, session) {
  extended_task <- ExtendedTask$new(
    function(...) mirai({Sys.sleep(y); runif(x)}, ...)
  ) |> bind_task_button("btn")
  observeEvent(input$btn, extended_task$invoke(x = input$n, y = input$delay))
  output$plot <- renderPlot(hist(extended_task$result()))
}

app <- shinyApp(ui = ui, server = server)
with(daemons(2), runApp(app))
```

## Steps to Use ExtendedTask

1. [UI] create a `bslib::input_task_button()` - disabled during computation to prevent extra clicks

. . .

```{.r}
input_task_button("btn", "Plot uniform distribution")
```

## Steps to Use ExtendedTask

2. [server] create an ExtendedTask by calling `ExtendedTask$new()` on a function passing `...` to a `mirai()` call, bind it to the button created above

. . .

```{.r}
extended_task <- ExtendedTask$new(
    function(...) mirai({Sys.sleep(y); runif(x)}, ...)
  ) |> bind_task_button("btn")
```

. . .


3. [server] create an observer on the input button, which invokes the ExtendedTask with the _named_ parameters for the mirai (passed via the `...`)

. . .

```{.r}
observeEvent(input$btn, extended_task$invoke(x = input$n, y = input$delay))
```

## Steps to Use ExtendedTask

4. [server] create a render function for the output, which consumes the ExtendedTask result

. . .

```{.r}
output$plot <- renderPlot(hist(extended_task$result()))
```

## Another Way

```{.r code-line-numbers="8,13-17"}
library(shiny)
library(bslib)
library(mirai)

ui <- page_fluid(
  numericInput("n", "Sample size (n)", 100),
  numericInput("delay", "Seconds to take for plot", 5),
  input_task_button("btn", "Plot uniform distribution"),
  plotOutput("plot")
)

server <- function(input, output, session) {
  extended_task <- ExtendedTask$new(
    function(x, y) mirai({Sys.sleep(y); runif(x)}, environment())
  ) |> bind_task_button("btn")
  observeEvent(input$btn, extended_task$invoke(input$n, input$delay))
  output$plot <- renderPlot(hist(extended_task$result()))
}

app <- shinyApp(ui = ui, server = server)
with(daemons(2), runApp(app))
```

# Plumber

##

Examples: https://shikokuchuo.net/mirai/articles/plumber.html


```{r}
library(plumber)
library(promises)
library(mirai)

pr() |>
  pr_get(
    "/echo",
    function(req, res) {
      mirai(
        { Sys.sleep(1L); list(status = 200L, body = list(msg = msg)) },
        msg = req[["HEADERS"]][["msg"]]
      ) %...>% (function(x) {
          res$status <- x$status
          res$body <- x$body
        })
    }
  ) |>
  pr_run(host = "127.0.0.1", port = 8985)
```


## Summary {.center}

* mirai is the next generation parallel & distributed computing platform
* First implementation of event-driven promises
* First alternative communications backend for the `parallel` package

Thank you!

<!--



library(shiny)
library(mirai)
library(bslib)
library(ggplot2)
library(aRtsy)

# function definitions

run_task <- function(calc_time) {
  Sys.sleep(calc_time)
  list(
    colors = aRtsy::colorPalette(name = "random", n = 3),
    angle = runif(n = 1, min = - 2 * pi, max = 2 * pi),
    size = 1,
    p = 1
  )
}

plot_result <- function(result) {
  do.call(what = canvas_phyllotaxis, args = result)
}

# modules for individual plots

plotUI <- function(id, calc_time) {
  ns <- NS(id)
  card(
    strong(paste0("Plot (calc time = ", calc_time, " secs)")),
    input_task_button(ns("resample"), "Resample"),
    plotOutput(ns("plot"), height="400px", width="400px")
  )
}

plotServer <- function(id, calc_time) {
  force(id)
  force(calc_time)
  moduleServer(
    id,
    function(input, output, session) {
      extended_task <- ExtendedTask$new(
        function(x, run = run_task) mirai(run(x), environment())
      ) |> bind_task_button("resample")
      
      observeEvent(input$resample, extended_task$invoke(calc_time))
      
      output$plot <- renderPlot(plot_result(extended_task$result()))
      
    }
  )
}

# ui and server

ui <- page_sidebar(fillable = FALSE,
  sidebar = sidebar(
    numericInput("calc_time", "Calculation time (secs)", 5),
    actionButton("add", "Add", class="btn-primary"),
  ),
  layout_column_wrap(id = "results", width = "400px", fillable = FALSE)
)

server <- function(input, output, session) {

  observeEvent(input$add, {
    id <- nanonext::random(4)
    insertUI("#results", where = "beforeEnd", ui = plotUI(id, input$calc_time))
    plotServer(id, input$calc_time)
  })
}

app <- shinyApp(ui, server)

# run app using 3 local daemons
with(daemons(3), runApp(app))



-->

